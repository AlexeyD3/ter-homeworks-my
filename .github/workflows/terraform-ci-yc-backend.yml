name: "Terraform CI/CD Backend"

on:
  push:
    branches:
      - terraform-hotfix-ci
    paths:
      - '05/src/**'
  pull_request:
    branches:
      - main
    paths:
      - '05/src/**'

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    env:
      working-directory: 05/src
      yc_token: ${{ secrets.YC_TOKEN }}
      yc_cloud_id: ${{ secrets.YC_CLOUD_ID }}
      yc_folder: ${{ secrets.YC_FOLDER_ID }}
      accessKeyId: ${{ secrets.YC_ACCESS_KEY_ID }}
      secretAccessKey: ${{ secrets.YC_SECRET_ACCESS_KEY }}
      bucket: ${{ secrets.BUCKET }}

    defaults:
      run:
        working-directory: ${{ env.working-directory }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2

#      - name: Configure Yandex Cloud credentials
#        uses: yc-actions/yc-iam-token@v1
#        with:
#          yc-sa-json-credentials: ${{ secrets.YC_KEY }}
      - name: "Mirror for YC provider"
        run: cat <<EOF >> ~/.terraformrc \n provider_installation { network_mirror { url = \"https://terraform-mirror.yandexcloud.net/\" include = [\"registry.terraform.io/*/*\"] } direct { exclude = [\"registry.terraform.io/*/*\"] } } \n EOF

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`${process.env.PLAN}\`\`\`
            
            </details>
            
            Results for commit: ${{ github.event.pull_request.head.sha }}

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.working-directory }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
#        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve